<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ian Clare]]></title><description><![CDATA[I blog about stuff.]]></description><link>https://iclare.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 28 Mar 2020 03:40:50 GMT</lastBuildDate><item><title><![CDATA[Commarch]]></title><description><![CDATA[React React is a JavaScript library for building interfaces. It is the prevailing
front end library for the web. What sets React apart from…]]></description><link>https://iclare.github.io/commarch-report/</link><guid isPermaLink="false">https://iclare.github.io/commarch-report/</guid><pubDate>Fri, 27 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;React&lt;/h1&gt;
&lt;p&gt;React is a JavaScript library for building interfaces. It is the prevailing
front end library for the web. What sets React apart from previous options is
that it is simply a library for intelligently updating the dom (with some fancy
html style syntax if you want). React also encourages writing frontends in
terms of components through its api and JSX. React is backed by Facebook, but
as we’ll see it’s largely been the community that has been driving its
maintenance and evolution.&lt;/p&gt;
&lt;p&gt;React was initially released May 29, 2013 and was originally authored by Jordan
Walke. In the frontend world, React can be considered a very mature project at
this point. While the project continually is improved with new features (Hooks,
and concurrent mode being the standouts) React is used in production systems by
countless businesses. React has had a major change to its DOM diffing, however
the API of React has been stable through this change. This sheds some light on
the fact that React has matured to the point that real caution is taken against
breaking changes.&lt;/p&gt;
&lt;p&gt;React is an incredibly sustainable project. Not only is React supported by a
large organization that pays its employees to work on the project, it is also
supported by a community ranging from beginners and experienced professionals.
The fact that you can make a living teaching React to beginners speaks volumes
about how sustainable it is. Dan Abramov, a co creator of Redux, was brought on
to the React team at Facebook, which is a healthy sign that the React team is
receptive towards and values their community. Frontend technologies are a bit
driven by the idea of using the hottest new technology or library. React is
resilient towards losing out to hot new technologies as it is simply a library.
For example, while Angular may have a more cohesive API, and everything ‘just
works’, it’s difficult for someone to come along and create something that
either improves or slots into the ecosystem.&lt;/p&gt;
&lt;p&gt;React is MIT licensed, and is governed by Facebook employees. While Facebook
employees accept pull requests from the community, from the contribution graph
&lt;a href=&quot;https://github.com/facebook/react/graphs/contributors&quot;&gt;https://github.com/facebook/react/graphs/contributors&lt;/a&gt; we can see that almost
all of the top 50 contributors (by commits) are all or were Facebook employees.&lt;/p&gt;
&lt;h1&gt;Zig&lt;/h1&gt;
&lt;p&gt;Zig is a programming language that can be thought of as a better C. Zig is to
Rust what Python is to Haskell. The project was started by Andrew Kelley in
2016. He currently works full time on the project. It provides a way to write
fast programs that do not need certain safety guarantees. Basically, if you can
write C, you can write Zig, and once you do, you’ll find you’re not shooting
yourself in the foot as often. If you go from writing Rust to Zig, you’ll find
that you’re fighting with the compiler less often when you’re using unsafe Rust
anyway.&lt;/p&gt;
&lt;p&gt;Zig is not exactly mature. It is hard to find companies that use Zig in
production. It is also hard to find many community projects on GitHub that use
Zig. However when it comes to niche and in development programming languages,
Zig is quite popular. Zig was on the front page of Hacker News quite recently
&lt;a href=&quot;https://news.ycombinator.com/item?id=22679138&quot;&gt;https://news.ycombinator.com/item?id=22679138&lt;/a&gt;. For the conservative systems
programming ecosystem, Zig is one of the fastest growing projects on GitHub.
From my own experience playing with Zig the API is very fragile at the moment,
so I would not consider the project mature.&lt;/p&gt;
&lt;p&gt;At the moment it’s hard to say that Zig is sustainable. While the project has
been around since 2016, Andrew Kelley is by far its main contributor and
maintainer. Zig is not backed by any company and runs solely on a small
community of contributors towards Andrew’s work. Zig sees surges in popularity
every few months it seems whenever it’s posted on sites like Hacker News. I
don’t see the project being sustained in this manner much longer however. It’s
unlikely that the project will see a rapid surge in popularity such that it can
be self sustaining. Seeing as this is a systems level project it can actually
be quite sustainable so long as the slower growth in popularity keeps pace with
the systems programming ecosystem.&lt;/p&gt;
&lt;p&gt;Zig is MIT licensed, and is largely governed by Andrew K. Andrew K has the last
word when it comes to what is contributed to the project. From my experiencing
contributing to Zig it is very lax when it comes to how and what you contribute
to, though this is likely only sustainable due to how early stage the project
is.&lt;/p&gt;
&lt;h1&gt;Comparison&lt;/h1&gt;
&lt;h2&gt;Maturity&lt;/h2&gt;
&lt;p&gt;Clearly React is the more mature project, as it sees much more use in
production, and has been in development since 2011 under funding of one of the
largest corporations in the world. Zig has not even reached 1.0 and has a
brittle API. Although they were created for very different reasons and are a
part of ecosystems that move at a different pace, I think it’s safe to say
React is the more mature project in this case.&lt;/p&gt;
&lt;h2&gt;Sustainabiity&lt;/h2&gt;
&lt;p&gt;Again the difference here is pretty stark. React is backed by a huge company,
dedicated community, and has a cool factor among most younger programmers. Zig
on the other hand is largely maintained by a single significant contributor
whos only monetary form of support is through donations. What’s impressive
about Zig in this regard is that it has gained many people’s attention despite
being part of the systems programming ecosystem and without the backing of a
large company.&lt;/p&gt;
&lt;h2&gt;Governance&lt;/h2&gt;
&lt;p&gt;Both React and Zig are MIT licensed and have a central form of governance.
React’s own team decides what go in and out of the language, similar to Andrew
Kelley having the final say about Zig. React and Zig have different standards
for their contributors however. While Zig’s contribution guideline are
basically to have some tests, React has quite a comprehensive guide
&lt;a href=&quot;https://reactjs.org/docs/how-to-contribute.html&quot;&gt;https://reactjs.org/docs/how-to-contribute.html&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Commarch Proposal]]></title><description><![CDATA[Team Members Cobey Adekanbi - cja1093@rit.edu Ian Clare - idc6209@rit.edu Project We decided to analyze React. ReactJS is a Javascript…]]></description><link>https://iclare.github.io/commarch/</link><guid isPermaLink="false">https://iclare.github.io/commarch/</guid><pubDate>Thu, 05 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Team Members&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cobey Adekanbi - cja1093@rit.edu&lt;/li&gt;
&lt;li&gt;Ian Clare - idc6209@rit.edu&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Project&lt;/h1&gt;
&lt;p&gt;We decided to analyze React.&lt;/p&gt;
&lt;p&gt;ReactJS is a Javascript Library for constructing user interfaces. It’s very
versatile and the component-based architecture makes development more
predictable and fluid.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React’s public repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We felt that an analysis of React would gain us some interesting insights into
the development of a project that gained massive popularity over a short
period of time.&lt;/p&gt;
&lt;h1&gt;Roles&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ian - Code and contribution analysis&lt;/li&gt;
&lt;li&gt;Cobey - Community and documentation history&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Upstream Mentors&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Dan Abramov - &lt;a href=&quot;https://twitter.com/dan_abramov&quot;&gt;https://twitter.com/dan_abramov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jordan Walke - &lt;a href=&quot;https://twitter.com/jordwalke&quot;&gt;https://twitter.com/jordwalke&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Easy Parts&lt;/h1&gt;
&lt;p&gt;well documented
lots of experts on the project history / contributors
history is well documented&lt;/p&gt;
&lt;h1&gt;Addressing Challenges&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The size of the project is large.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use git by a truck, which is a fork of git by a bus for large projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are many contributors, and multiple communication streams.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Communicate directly with the main experts on React.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;React has been rapidly evolving as a project and community.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compare our findings with previous analysis on React&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[quiz1]]></title><description><![CDATA[1) Please expand each of the following acronyms (1 pt each): 2) What is the name of the version control system we use in this course? (1 pt…]]></description><link>https://iclare.github.io/quiz-01/</link><guid isPermaLink="false">https://iclare.github.io/quiz-01/</guid><pubDate>Wed, 04 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;1) Please expand each of the following acronyms (1 pt each):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-   1.1) IRC internet relay chat
-   1.2) FOSS free or open source sofwtare
-   1.3) OLPC one laptop per child
-   1.4) FSF free software foundation
-   1.5) PR pull request&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2) What is the name of the version control system we use in this course? (1 pt)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Bonus:&lt;/em&gt; Give the name for another version control system. (1pt)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;mercurial&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3) Please give the one-word name for the interface used in the OLPC computers &amp;#x26; our VMs? (1 pt)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sugar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4) &lt;em&gt;Bonus:&lt;/em&gt; What is the short, two-letter name for the OLPC computers used in the final project for this class? (1 pt)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;XO&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5) We refer to sites that host source code as “forges”. What is the name of the primary forge used in this course? (1 pt)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;github&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6) &lt;em&gt;Bonus:&lt;/em&gt; Name the other forge we have used? (1pt)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gitlab&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7) &lt;em&gt;Bonus:&lt;/em&gt; Name another forge, one we have not used for this course. (1pt)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gitbucket&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Multiple choice&lt;/p&gt;
&lt;p&gt;8) The GitHub-specific term to describe the process in which, starting from one repository hosted at GitHub, one creates another repository, also hosted at GitHub, but under the control of a different user account.&lt;/p&gt;
&lt;p&gt;a) repository b) branch c) remote d) fork e) clone&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fork&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9) A collection of related commit objects&lt;/p&gt;
&lt;p&gt;a) repository b) branch c) remote d) fork e) clone&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;repository&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10) A separate, but related, repository from which one may fetch or pull changes into one’s own working copy, and to which in some instances one might have permission to push changes from one’s own working copy.&lt;/p&gt;
&lt;p&gt;a) repository b) branch c) remote d) fork e) clone&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;remote&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;11) The general term in git for making an exact, working copy of another repository in which changes can be tracked separately between the two versions.&lt;/p&gt;
&lt;p&gt;a) repository b) branch c) remote d) fork e) clone&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;clone&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;12) A namespace in which one can track changes to a set of files within a given repository.
This term applies both to the action and to the result of the action.
Comparisons (‘diffs’ or patches) can be made between different such namespaces.&lt;/p&gt;
&lt;p&gt;a) repository b) branch c) remote d) fork e) clone&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;branch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;We’ve discussed “the four R’s” as a shorthand for the freedoms attached to software for it to be considered “free” or “open source”. List or describe each. (eg, if you can remember the “r” word you can just give that. If you cannot remember the term, but can describe the freedom involved, that also counts). Various “r” words are roughly synonymous for some of the freedoms, but we’re counting freedoms here, not synonyms so if you give two (or more) terms for the same freedom, it only counts once. For the purposes of this quiz, “remix” does not count as describing any of them. (1pt each)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;10.1) run

10.2) read

10.3) repair

10.4) redistribute&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Zig]]></title><description><![CDATA[I heard about the Zig programming language, about a
year ago. In short, Zig is a high performance language with tight C integration
that…]]></description><link>https://iclare.github.io/contributing-to-zig/</link><guid isPermaLink="false">https://iclare.github.io/contributing-to-zig/</guid><pubDate>Tue, 03 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I heard about the &lt;a href=&quot;https://ziglang.org/&quot;&gt;Zig&lt;/a&gt; programming language, about a
year ago. In short, Zig is a high performance language with tight C integration
that values simplicity, explicitness, and control. I’ve always been interested
in high performance and low level programming, so Zig caught my interest. What
I also like about Zig is that you do not need to learn and use additional
syntax or keywords, or shift your programming style to convince the language
that you know what you’re doing &lt;a href=&quot;https://andrewkelley.me/post/unsafe-zig-safer-than-unsafe-rust.html&quot;&gt;Unsafe Zig is Safer than Unsafe Rust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Zig, the priority is not just to have a safer language, but also
to be a small simple language that has no hidden control flow. All control flow
is made explicit in Zig. Zig also gives you full control over memory, as well
as making it obvious when anything is going to allocate memory. Zig allows you
to create your own allocators &lt;a href=&quot;https://ziglang.org/#toc-Manual-memory-management&quot;&gt;manual memory management&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While Zig may be an easy language to learn (with just a 500 line file
describing its grammar, &lt;a href=&quot;https://ziglang.org/documentation/master/#Grammar&quot;&gt;Grammar file&lt;/a&gt;)
the project is still changing at a fast pace. the last major release &lt;code class=&quot;language-text&quot;&gt;0.5.0&lt;/code&gt;
came just a few months after the previous major release.&lt;/p&gt;
&lt;p&gt;Zig doesn’t try to compete with languages like Rust or C++, instead it is meant
to compete with C, and takes advantage of its ecosystem. Among other C related features,
Zig also ships with the ability to translate C into Zig.&lt;/p&gt;
&lt;p&gt;Zig’s community is another reason why I took interest in the language.
Zig was created by &lt;a href=&quot;https://andrewkelley.me/&quot;&gt;Andrew Kelley&lt;/a&gt;.
He works on Zig full time and interacts frequently with the &lt;a href=&quot;https://github.com/ziglang/zig/wiki/Community&quot;&gt;community&lt;/a&gt;,
you’ll usually see him answering question on the IRC, or working on Zig
on his &lt;a href=&quot;https://www.twitch.tv/andrewrok&quot;&gt;Twitch channel&lt;/a&gt;.
Zig is pretty open to contribution, and has a receptive community.
Zig’s &lt;a href=&quot;https://github.com/ziglang/zig/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;
basically has no restrictions other than suggesting you add a test case for
your changes.&lt;/p&gt;
&lt;p&gt;I wanted to learn Zig and get involved in the community so I looked into open
issues that were labeled contributor friendly.&lt;/p&gt;
&lt;p&gt;I ended up submitting a WIP PR related to the C to Zig translation feature.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ziglang/zig/pull/4604&quot;&gt;WIP Detect number literals from macro substitution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I wasn’t able to completely address the issue I was fixing, although it seemed
pretty simple on the surface, it actually took quite a bit of time setting up
Zig, and reading the code that was already there. Zig is wrapping clang’s AST
API, but did not include the functions I needed to be able to detect whether an
integer literal came from a macro substitution, so I had to do some reading of
the clang API as well.&lt;/p&gt;
&lt;p&gt;In retrospect I was probably way too ambitious taking this on considering how
hard my current semester in school has been, but I wanted a fun challenge. Thankfully, the
Zig creator architects his code so that it is easy to contribute to the
higher level aspects of the project.&lt;/p&gt;
&lt;p&gt;I actually had quite a bit more code than what I submitted in the pull request,
but I realized I was making pretty big assumptions, and probably should submit
what I already had just to make sure I was heading in the right direction.&lt;/p&gt;
&lt;p&gt;In the pull request at the moment, while I’m able to determine that an integer
literal came from a macro, I do not yet get the name of the macro and
substitute that in place of the integer literal. I wrote a solution which
unfortunately depended on clang/lexer, which is not used anywhere else in the
project, so I decided so rip that out and ask for feedback on what I had up to
detecting int literal macros.&lt;/p&gt;
&lt;p&gt;I hope to gain some feedback soon. Be on the look out for part 2 of this post if this interested you.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[WebAssembly]]></title><description><![CDATA[WebAssembly is a low level language that runs with
near-native performance. It is not intended to be written by hand,
and so provides a…]]></description><link>https://iclare.github.io/webassembly/</link><guid isPermaLink="false">https://iclare.github.io/webassembly/</guid><pubDate>Wed, 26 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;WebAssembly is a low level language that runs with
near-native performance. It is not intended to be written by hand,
and so provides a compilation target for languages like C/C++ and Rust.
This means these languages now have a way to run on the web.&lt;/p&gt;
&lt;h1&gt;So What?&lt;/h1&gt;
&lt;p&gt;The implications of WebAssembly are pretty big.
WebAssembly means you can run code written
in any number of languages, on the web, at near native speed.&lt;/p&gt;
&lt;p&gt;WebAssembly provides JavaScript APIs so you can load WebAssembly
modules into a JavaScript app. This means you can
replace parts of your code written in JavaScript with code
that targets WebAssembly, for massive performance gains.&lt;/p&gt;
&lt;p&gt;WebAssembly is being developed as a web standard via W3C and the community groups. WebAssembly 1.0 has already shipped in Firefox, Chrome, Safari, and Edge.&lt;/p&gt;
&lt;h1&gt;How does it work?&lt;/h1&gt;
&lt;p&gt;WebAssembly fits into a web platform that comes with web browsers.
In this web platform, there’s a virtual machine that runs web app code
(JavaScript), and there’s a set of APIs that can be called to control
the web platform; APIs like DOM, CSSOM, WebGL.&lt;/p&gt;
&lt;p&gt;In the past, the VM of web platforms has only been able to load JavaScript.
While JavaScript works well for most problems on the web, certain applications, like 3D games, VR, AR, image/video editing demand greater performance than an interpreted language can provide.&lt;/p&gt;
&lt;p&gt;Another issue is that browsers need to receive the full JavaScript source
of a web app in order to load it. This means large downloads, and on the fly
compilation that results in stuttering.&lt;/p&gt;
&lt;p&gt;The small binary and ahead of time compilation of a WebAssembly module
results in web apps that are much faster to download and run with better
performance.&lt;/p&gt;
&lt;h1&gt;How do I get started?&lt;/h1&gt;
&lt;p&gt;WebAssembly is still a young technology, so garbage collected languages
are not yet supported. Your best options are to either port a C/C++ application with Emscripten, Write a Rust application targeting WebAssembly as the output, or use AssemblyScript to write TypeScript style code that compiles to a WebAssembly binary. See the links below to get started with either of these options.&lt;/p&gt;
&lt;h1&gt;See also&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://webassembly.org/&quot;&gt;webassembly.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts&quot;&gt;developer.mozilla.org/en-US/docs/WebAssembly/Concepts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://emscripten.org/docs/getting_started/index.html&quot;&gt;emscripten.org/docs/getting_started&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_wasm&quot;&gt;developer.mozilla.org/en-US/docs/WebAssembly/Rust&lt;em&gt;to&lt;/em&gt;wasm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.assemblyscript.org/&quot;&gt;docs.assemblyscript.org&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Free Versus Open Source Software]]></title><description><![CDATA[This blog post is about my thoughts on an article by Benjamin Mako Hill.
When Free Software Isn’t Better Benjamin Mako Hill, a board…]]></description><link>https://iclare.github.io/free-versus-open-source-software/</link><guid isPermaLink="false">https://iclare.github.io/free-versus-open-source-software/</guid><pubDate>Mon, 17 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This blog post is about my thoughts on an article by Benjamin Mako Hill.
&lt;a href=&quot;https://mako.cc/writing/hill-when_free_software_isnt_better.html&quot;&gt;When Free Software Isn’t Better&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Benjamin Mako Hill, a board director for the Free Software Foundation, writes
that there is an issue with the philosophy of open source, at least in the open
source initiative’s mission statement.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Open source is a development method for software that harnesses the power of
distributed peer review and transparency of process. The promise of open
source is better quality, higher reliability, more flexibility, lower cost,
and an end to predatory vendor lock-in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hill argues that the Open Source’s definition for software devalues Free
Software Projects. He argues that it has been shown that proprietary software
can exceed the quality of projects that would be considered open source or free
software. Hill also points out that many free software projects hosted online
have at most five contributors; again the open source initiative’s mission
statement gives one little reason to contribute to these kinds of projects.
Hill explains that the open source initiative’s mission statement suggests that
many free software projects with a small number of contributors have no
advantage over proprietary software. He then compares open source to free
software; that with free software advocates, these projects with few
contributors are still seen as a small success; that these projects begin with
an ethical advantage over any proprietary software.&lt;/p&gt;
&lt;p&gt;Hill closes his article by stating that the open source initiative should be
able to defend their mission statement that collaborative development resulting
from free software results in higher quality software. He also acknowledges
that there is no need to reject the arguments presented by the open source
initiative that collaborative development can result in higher quality
software.&lt;/p&gt;
&lt;p&gt;I believe that main idea that Hill wants us to take away from his article is
that the philosophy of the free software foundation is focused on the ethical
aspects of software to argue towards contributing to free software projects,
while the open source initiative argues that “open sourcing” your project will
lead to higher quality projects, which is not always the case.&lt;/p&gt;
&lt;p&gt;I give the article 0b100 out of 0b101. I would have liked to have known Hill’s
thoughts on combining the ideologies of open source and free software. While
the free software foundation focuses on ethics of free / open software, the
open source initiative focuses on the merits of free / open software.&lt;/p&gt;
&lt;p&gt;Some food for thought:&lt;/p&gt;
&lt;p&gt;Doesn’t a separation of idealogies cause a rift among developers, and actually
discourage collaboration / openness?&lt;/p&gt;
&lt;p&gt;Can’t the open source initiative and free software foundation combine their
efforts and idealogies?&lt;/p&gt;
&lt;p&gt;If it’s technically difficult to combine their efforts, isn’t that evidence of
my first question?&lt;/p&gt;
&lt;p&gt;If combining the efforts of both organizations resulted in one larger organization,
would that violate the ideal for decentralization?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Software Licenses]]></title><description><![CDATA[You’ve probably seen some variation of these popular licenses: BSD (Original, Modified, Free) ISC MIT (Expat, X11) What’s the difference…]]></description><link>https://iclare.github.io/software-licenses/</link><guid isPermaLink="false">https://iclare.github.io/software-licenses/</guid><pubDate>Sat, 08 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;You’ve probably seen some variation of these popular licenses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BSD (Original, Modified, Free)&lt;/li&gt;
&lt;li&gt;ISC&lt;/li&gt;
&lt;li&gt;MIT (Expat, X11)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What’s the difference between them?&lt;/p&gt;
&lt;h1&gt;BSD&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.gnu.org/licenses/license-list.html#OriginalBSD&quot;&gt;Original BSD license&lt;/a&gt;,
can be used as a permissive license that is similar to the MIT license but with
additional requirements regarding advertising and name reuse. The original BSD
license is also known as the “4-clause BSD license”. You should use the
&lt;a href=&quot;https://www.gnu.org/licenses/license-list.html#ModifiedBSD&quot;&gt;Modified (3-clause) BSD license&lt;/a&gt;
in place of this license for GPL compatibility.&lt;/p&gt;
&lt;p&gt;Unlike the Modified BSD license, the
&lt;a href=&quot;https://www.gnu.org/licenses/license-list.html#FreeBSD&quot;&gt;Free (2-clause) BSD license&lt;/a&gt;
,omits the non-endorsement clause, as well as adding a disclaimer about views
and opinions expressed in the software. This license is also known as the
Simplified BSD License.&lt;/p&gt;
&lt;h1&gt;ISC&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.gnu.org/licenses/license-list.html#ISC&quot;&gt;ISC license&lt;/a&gt; is
another permissive license. This license is also known as the OpenBSD license.
Like Modified and Free BSD, it is compatible with GPL. This license is
equivalent to the MIT or Free BSD licenses in function, but omits some language
deemed unnecessary. Although brief, there are some issues with wording in this
license. To avoid issues with the wording in the future, it’s recommended to
use another license.&lt;/p&gt;
&lt;h1&gt;MIT&lt;/h1&gt;
&lt;p&gt;There are two licenses that are typically referred to as “the MIT license”.
These are the &lt;a href=&quot;https://www.gnu.org/licenses/license-list.html#Expat&quot;&gt;Expat license&lt;/a&gt;
and the &lt;a href=&quot;https://www.gnu.org/licenses/license-list.html#X11License&quot;&gt;X11 license&lt;/a&gt;.
The Expat license is a permissive, GPL compatible license. This license is
similar to the ISC license but worded to resolve ambiguities. Unlike the Expat
license, the X11 license forbids exploiting the names of copyright holders.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Programming is Forgetting]]></title><description><![CDATA[This is a second blog post on Allison Parrish’s talk Programming is Forgetting: A New Hacker Ethic In this second blog post I go into more…]]></description><link>https://iclare.github.io/programming-is-forgetting-part-2/</link><guid isPermaLink="false">https://iclare.github.io/programming-is-forgetting-part-2/</guid><pubDate>Wed, 05 Feb 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a second blog post on Allison Parrish’s talk &lt;a href=&quot;http://opentranscripts.org/transcript/programming-forgetting-new-hacker-ethic/&quot;&gt;Programming is Forgetting: A New Hacker Ethic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this second blog post I go into more detail about Allison’s talk, including some
things I agree with, disagree with, and questions I believe are important to think about
after having watched the talk.&lt;/p&gt;
&lt;p&gt;The point Allison Parrish is trying to get across is that Levy’s Hacker Ethic,
while making sense at first, should be re-examined. That the problems with the Hacker Ethic
is not in its execution, but its underlying philosophy.&lt;/p&gt;
&lt;p&gt;Levy’s Hacker Ethic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Access to computers should be unlimited and total
All information should be free
Mistrust authority—promote decentralization
Hackers should be judged by their hacking, not bogus criteria such as degrees, age, race or position
You can create art and beauty on a computer
Computers can change your life for the better&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My main issue with the talk is that she assumes that the source of hacker culture comes from or is heavily influenced by Levy’s Hacker Ethic. While It’s likely that the Hacker Ethic influenced hacker culture,&lt;/p&gt;
&lt;p&gt;I don’t believe that most programmers who consider them self a hacker (in the broadest sense possible) are
even aware of Levy’s Hacker Ethic in this day and age. I believe that people who consider them self a hacker in this day are simply people who are dedicated to bending computer software and hardware to their will and to their standards. Allison talks about hacker culture, but it is hard to even narrow down who belongs to the culture.&lt;/p&gt;
&lt;p&gt;In my opinion the Hacker Ethic is still valuable as is, so long as it is taken as a list of ideals to strive for, rather than a list of commandments.&lt;/p&gt;
&lt;p&gt;The new Hacker Ethic (Hacker Questions) Allison presents is certainly valuable if we are talking about
free and open source software. Though I believe it may be more fitting to call it Software Ethic Questions as
the term hacker now has such a wide range of use now.&lt;/p&gt;
&lt;p&gt;I give this talk a thumbs up.&lt;/p&gt;
&lt;p&gt;These are some questions I think are important to think about after watching this talk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How has the word Hacker changed in connotation over the years?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has the word Hacker gone from meaning a passion for computers and a desire to share it with all to something else?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why does Allison go into detail about technical subjects (like jpeg compression) to illustrate simple points?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Isn’t the assumption that your audience is technical going to turn people away? Wouldn’t that go against providing access and information? Is she unintentionally diluting her premise by sharing her passion?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How can we convince people to strive to address the Hacker Questions Allison gives as a new Hacker Ethic?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If one recognizes themself to have high morality and they are given the opportunity to lead an unethical software project (collecting personal information), would it be unethical to allow another individual of low morality to take the lead instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Programming is Forgetting]]></title><description><![CDATA[Allison Parish’s presentation at the Open Hardware Summit 2016
Programming is Forgetting: Toward a New Hacker Ethic I might disagree with…]]></description><link>https://iclare.github.io/programming-is-forgetting/</link><guid isPermaLink="false">https://iclare.github.io/programming-is-forgetting/</guid><pubDate>Fri, 31 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Allison Parish’s presentation at the Open Hardware Summit 2016
&lt;a href=&quot;http://opentranscripts.org/transcript/programming-forgetting-new-hacker-ethic/&quot;&gt;Programming is Forgetting: Toward a New Hacker Ethic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I might disagree with the conclusion, but I did enjoy watching this talk. I do agree that the literal interpretation of the hacker ethic is flawed, but I do still think that
it is valuable. Although the hacker ethic came from Levy’s book, it does not have to define what the hacker ethic is.&lt;/p&gt;
&lt;p&gt;In my opinion there are better interpretations for the hacker ethic tenants from Levy’s book, and should be considered with a context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Access to computers should be unlimited and total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While Allison points to ‘hackers’ as having denied Margaret Hamilton from access, I’d argue that this is a bad example of the hacker ethic as the denial of access was not intentional.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All information should be free.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don’t believe this should be interpreted literally. I believe we should strive to be open with information, but of course there is some information that simply cannot be shared such as personal information. It’s also important to consider that many jobs and economies rely on the fact that information can be treated as a commodity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mistrust authority. Promote decentralization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This I agree with for the most part. Decentralization should be the ideal when we can avoid compromise in another ideal such as access.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[This is my first post on my new blog / personal site! I set this blog up for a course I’m taking at RIT HFOSS. Setting up this blog was an…]]></description><link>https://iclare.github.io/hello-world/</link><guid isPermaLink="false">https://iclare.github.io/hello-world/</guid><pubDate>Wed, 22 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is my first post on my new blog / personal site!&lt;/p&gt;
&lt;p&gt;I set this blog up for a course I’m taking at RIT &lt;a href=&quot;https://github.com/ritjoe/hfoss&quot;&gt;HFOSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Setting up this blog was an interesting process.&lt;/p&gt;
&lt;p&gt;I decided to create my blog using GitHub Pages as I’m familiar with GitHub. I also figured GitHub Pages
would work well enough for a simple static site.&lt;/p&gt;
&lt;p&gt;I wanted to have the option of changing the layout
and style of the blog in case I wanted to turn it into a personal site down the road. I also wanted to
customize the blog using React since I’m familiar with it. I ended up using &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;
as it allows you to write React to easily generate a static site.&lt;/p&gt;
&lt;p&gt;I was able to start writing this blog post within an hour of learning about Gatsby.
Unfortunately this does mean I have to keep a 386mb &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; folder on my system if I want
to preview my posts before publishing them.&lt;/p&gt;</content:encoded></item></channel></rss>