{"componentChunkName":"component---src-templates-blog-post-js","path":"/contributing-to-zig/","result":{"data":{"site":{"siteMetadata":{"title":"Ian Clare"}},"markdownRemark":{"id":"ee2898ac-278b-5033-b96a-f64ede96f1f7","excerpt":"I heard about the Zig programming language, about a\nyear ago. In short, Zig is a high performance language with tight C integration\nthat values simplicity…","html":"<p>I heard about the <a href=\"https://ziglang.org/\">Zig</a> programming language, about a\nyear ago. In short, Zig is a high performance language with tight C integration\nthat values simplicity, explicitness, and control. I’ve always been interested\nin high performance and low level programming, so Zig caught my interest. What\nI also like about Zig is that you do not need to learn and use additional\nsyntax or keywords, or shift your programming style to convince the language\nthat you know what you’re doing <a href=\"https://andrewkelley.me/post/unsafe-zig-safer-than-unsafe-rust.html\">Unsafe Zig is Safer than Unsafe</a>.</p>\n<p>With Zig, the priority is not just to have a safer language, but also\nto be a small simple language that has no hidden control flow. All control flow\nis made explicit in Zig. Zig also gives you full control over memory, as well\nas making it obvious when anything is going to allocate memory. Zig allows you\nto create your own allocators <a href=\"https://ziglang.org/#toc-Manual-memory-management\">manual memory management</a>.</p>\n<p>While Zig may be an easy language to learn (with just a 500 line file\ndescribing its grammar, <a href=\"https://ziglang.org/documentation/master/#Grammar\">Grammar file</a>)\nthe project is still changing at a fast pace. the last major release <code class=\"language-text\">0.5.0</code>\ncame just a few months after the previous major release.</p>\n<p>Zig doesn’t try to compete with languages like Rust or C++, instead it is meant\nto compete with C, and takes advantage of its ecosystem. Among other C related features,\nZig also ships with ability to translate C into Zig.</p>\n<p>Zig’s community is another reason why I took interest in the language.\nZig was created by <a href=\"https://andrewkelley.me/\">Andrew Kelley</a>.\nHe works on Zig full time and interacts frequently with the <a href=\"https://github.com/ziglang/zig/wiki/Community\">community</a>,\nyou’ll usually see him answering question on the IRC, or working on Zig\non his <a href=\"https://www.twitch.tv/andrewrok\">Twitch channel</a>.\nZig is pretty open to contribution, and has a receptive community.\nZig’s <a href=\"https://github.com/ziglang/zig/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a>\nbasically has no restrictions other than suggesting you add a test case for\nyour changes.</p>\n<p>I wanted to learn Zig and get involved in the community so I looked into open\nissues that were labeled contributor friendly.</p>\n<p>I ended up submitting a WIP PR related to the C to Zig translation feature.</p>\n<p><a href=\"https://github.com/ziglang/zig/pull/4604\">WIP Detect number literals from macro substitution</a></p>\n<p>I wasn’t able to completely address the issue I was fixing, although it seemed\npretty simple on the surface, it actually took quite a bit of time setting up\nZig, and reading the code that was already there. Zig is wrapping clang’s AST\nAPI, but did not include the functions I needed to be able to detect whether an\ninteger literal came from a macro substitution, so I had to do some reading of\nthe clang API as well.</p>\n<p>In retrospect I was probably way too ambitious taking this on considering how\nhard my current semester in has been, but I wanted a fun challenge. Thankfully, the\nZig’s creator architects his code so that it is easy to contribute to the\nhigher level aspects of the project.</p>\n<p>I actually had quite a bit more code than what I submitted in the pull request,\nbut I realized I was making pretty big assumptions, and probably should submit\nwhat I already had just to make sure I was heading in the right direction.</p>\n<p>In the pull request at the moment, while I’m able to determine that an integer\nliteral came from a macro, I do not yet get the name of the macro and\nsubstitute that in place of the integer literal. I wrote a solution which\nunfortunately depended on clang/lexer, which is not used anywhere else in the\nproject, so I decided so rip that out and ask for feedback on what I had up to\ndetecting int literal macros.</p>\n<p>I hope to gain some feedback soon. Be on the look out for part 2 of this post if this interested you.</p>","frontmatter":{"title":"Zig","date":"March 03, 2020","description":"My experience contributing to Zig."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/contributing-to-zig/","previous":{"fields":{"slug":"/webassembly/"},"frontmatter":{"title":"WebAssembly"}},"next":null}}}